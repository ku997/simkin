import React from 'react'
import './styles.scss'
import PropTypes from 'prop-types'
import { Image } from '../../../modules/Image'
import { Table } from 'antd'
import { Table1 } from './components/Table1'
import { Table2 } from './components/Table2'
import { Table3 } from './components/Table3'
import { Table4 } from './components/Table4'
import { Table5 } from './components/Table5'
import { Table6 } from './components/Table6'

export function Lecture12(props) {
    return (
        <div className='lecture12'>


            <h2>4.2. Основы унифицированного языка моделирования UML</h2>

            <p>Существует большое количество инструментальных средств, используемых для реализации проекта ИС от этапа анализа до создания программного кода. Отдельно выделяют так называемые CASE-средства верхнего уровня (upper CASE tools) и CASE-средства нижнего уровня (lower CASE tools).</p>

            <p>Среди основных проблем использования CASE-средств верхнего уровня выделяют проблемы их адаптации под конкретные проекты, так как они жестко регламентируют процесс разработки и не дают возможности организовать работу на уровне отдельных элементов проекта. Альтернативой им может стать использование CASE-средства нижнего уровня, но их использование влечет другие проблемы – трудности в организации взаимодействия между командами, работающими над различными элементами проекта.</p>

            <p>Средством, позволяющим объединить эти подходы, явился унифицированный язык объектно-ориентированного моделирования (Unified Modeling Language – UML). К преимуществам языка UML можно отнести разнообразные инструментальные средства, которые как поддерживают жизненный цикл ИС, так и позволяют настроить и отразить специфику деятельности разработчиков различных элементов проекта.</p>

            <p>В конце 1980-х годов получили большое распространение объектно-ориентированные языки программирования. Тенденции их активного использования определили задачи разработки языка моделирования, дающего возможность реализовать объектно-ориентированный подход и построить наилучшую модель системы с указанием ее значимых свойств. Этим языком стал UML. В настоящее время UML как нотация моделирования ИС поддерживается рядом объектно-ориентированных CASE-продуктов.</p>

            <p>Основными характеристиками объектно-ориентированного языка моделирования UML являются:</p>

            <ul>
                <li>организация взаимодействия заказчика и разработчика (групп разработчиков) ИС путем построения репрезентативных визуальных моде-лей;</li>
                <li>специализация базовых обозначений для конкретной предметной области.</li>
            </ul>

            <p>Базовый набор диаграмм UML содержится в большом количестве средств моделирования. Однако в связи с тем, что каждая прикладная за-дача имеет свои особенности и не требует всех концепций в каждом приложении, язык предоставляет пользователям такие возможности, как:</p>

            <p>моделирование с использованием только средств «ядра» для типовых приложений;</p>

            <p>моделирование с использованием дополнительных условных обо-значений, если они отсутствуют в «ядре», или специализация нотации и ограничений для данной предметной области.</p>

            <p>Для поддержки моделирования различных этапов жизненного цикла ИС язык UML предлагает целую совокупность диаграмм.</p>

            <p>При разработке <b>концептуальной модели</b> применяют диаграммы вариантов использования и диаграммы деятельности, модели бизнес-объектов, диаграммы последовательностей.</p>

            <p>На этапе работы над <b>логической моделью</b> ИС описать требования к системе позволяют диаграммы вариантов использования, а при предвари-тельном проектировании используют диаграммы классов, диаграммы со-стояний, диаграммы последовательностей.</p>

            <p>Детальное проектирование при разработке <b>физической модели</b> выполняют с применением диаграмм классов, диаграмм развертывания, диаграмм компонентов.</p>

            <p>Последнюю официальную спецификацию языка можно найти на сайте www.omg.org.</p>

            <p>Общая структура UML показана на следующем рисунке.</p>
            {<Image src='assets/img/lab12/1.png' annotation='Рис. 16 Структура UML' />}

            <h3>Семантика и синтаксис UML</h3>

            <p>Семантика – раздел языкознания, изучающий значение единиц языка, прежде всего его слов и словосочетаний.</p>

            <p>Синтаксис – способы соединения слов и их форм в словосочетания и предложения, соединения предложений в сложные предложения, способы создания высказываний как части текста.</p>

            <p>Таким образом, применительно к UML, семантика и синтаксис определяют стиль изложения (построения моделей), который объединяет естественный и формальный языки для представления базовых понятий (элементов модели) и механизмов их расширения.</p>

            <h3>Нотация UML</h3>

            <p>Нотация представляет собой графическую интерпретацию семантики для ее визуального представления.</p>

            <p>В UML определено три типа сущностей:</p>

            <ul>
                <li>структурная – абстракция, являющаяся отражением концептуального или физического объекта;</li>
                <li>группирующая – элемент, используемый для некоторого смыслового объединения элементов диаграммы;</li>
                <li>поясняющая (аннотационная) – комментарий к элементу диаграммы.</li>
            </ul>

            <p>В следующей таблице приведено краткое описание основных сущностей, используемых в графической нотации, и основные способы их отображения.</p>
            <p>Таблица 1. Сущности</p>
            <Table1 />

            <p>В некоторых источниках выделяют также поведенческие сущности взаимодействия и конечные автоматы, но с логической точки зрения их следует отнести к диаграммам.</p>

            <p>Некоторые из приведенных выше сущностей в соответствии с приципами иерархического упорядочивания и декомпозиции подразумевают их подробное описание на диаграммах декомпозиции. На диаграмме верхнего уровня они помечаются особым значком или меткой.</p>
            <p>Таблица 2. Декомпозируемые сущности</p>
            <Table2 />
            <p>В следующей таблице приведено описание всех видов отношений UML, используемых на диаграммах для указания связей между сущностями.</p>
            <p>Таблица 3. Отношения</p>
            <Table3 />
            <p>Для ассоциации, агрегации и композиции может указываться <strong><em>кратность</em></strong> (англ. multiplicity), характеризующая общее количество экземпляров сущностей, участвующих в отношении. Она, как правило, указывается с каждой стороны отношения около соответствующей сущности. Кратность может указываться следующими способами:</p>

            <ul>
                <li>* – любое количество экземпляров, в том числе и ни одного;</li>
                <li>целое неотрицательное число – кратность строго фиксирована и равна указанному числу (например: 1, 2 или 5);</li>
                <li>диапазон целых неотрицательных чисел "первое число .. второе число" (например: 1..5, 2..10 или 0..5);</li>
                <li>диапазон чисел от конкретного начального значения до произвольного конечного "первое число .. <em>" (например: 1..</em>, 5..* или 0..*);</li>
                <li>перечисление целых неотрицательных чисел и диапазонов через за-пятую (например: 1, 3..5, 10, 15..*).</li>
            </ul>

            <p>Если кратность не указана, то принимается ее значение, равное 1. Кратность экземпляров сущностей, участвующих в зависимости, обобщении и реализации, всегда принимается равной 1.</p>

            <p>В следующей таблице приведено описание механизмов расширения, применяемых для уточнения семантики сущностей и отношений. В общем случае, механизм расширения представляет собой строку текста, заключенную в скобки или кавычки.</p>

            <p>Таблица 4. Механизмы расширения</p>
            <Table4 />
            <p>Помимо стереотипов, указываемых в виде строки текста в кавычках, на диаграммах могут использоваться графические стереотипы. На следу-ющем рисунке приведены примеры стандартного и стереотипного отоб-ражения класса-сущности.</p>
            <Image src='assets/img/lab12/25.jpg' annotation="Рис. 16 Примеры стандартного и стереотипного отображения класса" />
            <p><i><b>Диаграмма</b></i> представляет собой группировку элементов нотации для отображения некоторого аспекта разрабатываемой информационной системы. Диаграммы представляют собой, как правило, связный граф, в котором сущности являются вершинами, а отношения – дугами. В следующей таблице дана краткая характеристика диаграмм UML.</p>
            <p>Таблица 5. Диаграммы</p>
            <Table5 />
            <p>Стандарт UML 2.x определяет также дополнительные, узкоспециализированные диаграммы:</p>

            <ul>
                <li>диаграмму объектов (object diagram) - аналогична диаграмме классов, но вместо классов отображаются объекты;</li>
                <li>диаграмму синхронизации (timing diagram) - описывает состояния объекта с течением времени;</li>
                <li>композитную структурную диаграмму (composite structure diagram) - описывает порты (включая интерфейсы) класса для взаимодействия с другими классами;</li>
                <li>профильную диаграмму (profile diagram) - аналогична диаграмме пакетов с описанием классов, входящих в них;</li>
                <li>обзорную диаграмму взаимодействия (interaction overview diagram) - аналогична диаграмме последовательности, но со скрытыми фрагментами взаимодействия (фрагментами с меткой ref). Представляет собой контекстную (концептуальную) диаграмму последовательности, элементы ко-торой будут конкретизированы на отдельных диаграммах декомпозиции.</li>
            </ul>

            <p>В целях укрупненного концептуального представления внутренней архитектуры системы большинство Case-средств при построении диаграммы классов допускает использование устоявшихся графических стереотипов для так называемых классов анализа. Такая диаграмма называется диаграммой классов анализа, но не относится к перечню диаграмм, определенных стандартом UML.</p>

            <p>При разработке отдельной модели системы в Унифицированном процессе строят несколько видов диаграмм. Более того, при разработке модели сложной системы, как правило, строят несколько диаграмм одного и того же вида. В то же время можно не создавать отдельные виды диаграмм, если в этом нет необходимости. Например, диаграммы последовательности и коммуникации являются взаимозаменяемыми, диаграммы ав-томатов строятся только для объектов, обладающих сложным поведением. В следующей таблице приведены рекомендации о необходимости разработки (уточнении) диаграмм по моделям системы.</p>

            <p>Таблица 6. Связь моделей и диаграмм</p>
            <Table6 />
            <p>В приведенной таблице не приведена модель тестирования, так как в рамках ее построения диаграммы не разрабатываются, а проверяются (те-стируются) на полноту и непротиворечивость.</p>
        </div>
    )
}
