import React from "react";
import "./styles.scss";
import PropTypes from "prop-types";
import { Image } from "../../../modules/Image";
import { Table1 } from "./components/Table1";
import { Table2 } from "./components/Table2";
import { Table3 } from "./components/Table3";
import { Table4 } from "./components/Table4";
import { Table5 } from "./components/Table5";
import { Table6 } from "./components/Table6";

export function Lecture12(props) {
  return (
    <div className="lecture12">
      <h2>4.3.2 Нотация UML</h2>

      <p>
        Нотация представляет собой графическую интерпретацию семантики для ее
        визуального представления.
      </p>

      <p>В UML определено три типа сущностей:</p>

      <ul>
        <li>
          структурная – абстракция, являющаяся отражением концептуального или
          физического объекта;
        </li>
        <li>
          группирующая – элемент, используемый для некоторого смыслового
          объединения элементов диаграммы;
        </li>
        <li>поясняющая (аннотационная) – комментарий к элементу диаграммы.</li>
      </ul>

      <p>
        В таблице 3 приведено краткое описание основных сущностей, используемых
        в графической нотации, и основные способы их отображения.
      </p>
      <p>Таблица 3. Сущности</p>
      <Table1 />

      <p>
        В некоторых источниках выделяют также поведенческие сущности
        <i>взаимодействия</i> и <i>конечные автоматы</i>, но с логической точки
        зрения их следует отнести к диаграммам.
      </p>

      <p>
        Некоторые из приведенных выше сущностей в соответствии с принципами
        иерархического упорядочивания и декомпозиции подразумевают их подробное
        описание на диаграммах декомпозиции. На диаграмме верхнего уровня они
        помечаются особым значком или меткой (табл. 4).
      </p>
      <p>Таблица 4. Декомпозируемые сущности</p>
      <Table2 />
      <p>
        В таблице 5 приведено описание всех видов{" "}
        <b>
          <i>отношений</i>
        </b>{" "}
        UML, используемых на диаграммах для указания связей между сущностями.
      </p>
      <p>Таблица 5. Отношения</p>
      <Table3 />
      <p>
        Для ассоциации, агрегации и композиции может указываться{" "}
        <strong>
          <em>кратность</em>
        </strong>{" "}
        (англ. multiplicity), характеризующая общее количество экземпляров
        сущностей, участвующих в отношении. Она, как правило, указывается с
        каждой стороны отношения около соответствующей сущности. Кратность может
        указываться следующими способами:
      </p>

      <ul>
        <li> любое количество экземпляров, в том числе и ни одного;</li>
        <li>
          целое неотрицательное число – кратность строго фиксирована и равна
          указанному числу (например: 1, 2 или 5);
        </li>
        <li>
          диапазон целых неотрицательных чисел "первое число .. второе число"
          (например: 1..5, 2..10 или 0..5);
        </li>
        <li>
          диапазон чисел от конкретного начального значения до произвольного
          конечного "первое число .. <em>" (например: 1..</em>, 5..* или 0..*);
        </li>
        <li>
          перечисление целых неотрицательных чисел и диапазонов через за-пятую
          (например: 1, 3..5, 10, 15..*).
        </li>
      </ul>

      <p>
        Если кратность не указана, то принимается ее значение, равное 1.
        Кратность экземпляров сущностей, участвующих в зависимости, обобщении и
        реализации, всегда принимается равной 1.
      </p>

      <p>
        В таблице 6 приведено описание{" "}
        <b>
          <i>механизмов расширения</i>
        </b>
        , применяемых для уточнения семантики сущностей и отношений. В общем
        случае, механизм расширения представляет собой строку текста,
        заключенную в скобки или кавычки.
      </p>

      <p>Таблица 6. Механизмы расширения</p>
      <Table4 />
      <p>
        Помимо стереотипов, указываемых в виде строки текста в кавычках, на
        диаграммах могут использоваться графические стереотипы. На рисунке 17
        приведены примеры стандартного и стереотипного отображения
        класса-сущности.
      </p>
      <Image
        src="assets/img/lab12/25.jpg"
        annotation="Рис. 17 Примеры стандартного и стереотипного отображения класса"
      />
      <p>
        <i>
          <b>Диаграмма</b>
        </i>{" "}
        представляет собой группировку элементов нотации для отображения
        некоторого аспекта разрабатываемой информационной системы. Диаграммы
        представляют собой, как правило, связный граф, в котором сущности
        являются вершинами, а отношения – дугами. В таблице 7 дана краткая
        характеристика диаграмм UML.
      </p>
      <p>Таблица 7. Диаграммы</p>
      <Table5 />
      <p>
        Стандарт UML 2.x определяет также дополнительные, узкоспециализированные
        диаграммы:
      </p>

      <ul>
        <li>
          диаграмму объектов (object diagram) - аналогична диаграмме классов, но
          вместо классов отображаются объекты;
        </li>
        <li>
          диаграмму синхронизации (timing diagram) - описывает состояния объекта
          с течением времени;
        </li>
        <li>
          композитную структурную диаграмму (composite structure diagram) -
          описывает порты (включая интерфейсы) класса для взаимодействия с
          другими классами;
        </li>
        <li>
          профильную диаграмму (profile diagram) - аналогична диаграмме пакетов
          с описанием классов, входящих в них;
        </li>
        <li>
          обзорную диаграмму взаимодействия (interaction overview diagram) -
          аналогична диаграмме последовательности, но со скрытыми фрагментами
          взаимодействия (фрагментами с меткой ref). Представляет собой
          контекстную (концептуальную) диаграмму последовательности, элементы
          ко-торой будут конкретизированы на отдельных диаграммах декомпозиции.
        </li>
      </ul>

      <p>
        В целях укрупненного концептуального представления внутренней
        архитектуры системы большинство Case-средств при построении диаграммы
        классов допускает использование устоявшихся графических стереотипов для
        так называемых классов анализа. Такая диаграмма называется диаграммой
        классов анализа, но не относится к перечню диаграмм, определенных
        стандартом UML.
      </p>

      <p>
        При разработке отдельной модели системы в Унифицированном процессе
        строят несколько видов диаграмм. Более того, при разработке модели
        сложной системы, как правило, строят несколько диаграмм одного и того же
        вида. В то же время можно не создавать отдельные виды диаграмм, если в
        этом нет необходимости. Например, диаграммы последовательности и
        коммуникации являются взаимозаменяемыми, диаграммы ав-томатов строятся
        только для объектов, обладающих сложным поведением. В  таблице 8
        приведены рекомендации о необходимости разработки (уточнении) диаграмм
        по моделям системы.
      </p>

      <p>Таблица 8. Связь моделей и диаграмм</p>
      <Table6 />
      <p>
        В приведенной таблице не приведена модель тестирования, так как в рамках
        ее построения диаграммы не разрабатываются, а проверяются (те-стируются)
        на полноту и непротиворечивость.
      </p>
    </div>
  );
}
