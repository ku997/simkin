import React from 'react'
import './styles.scss'
import PropTypes from 'prop-types'
import { Image } from '../../../modules/Image'

export function Lecture3(props) {
    return (
        <div className='lecture3'>
            <h2>1.3 Основные методологии современного проектирования ин-формационных систем</h2>

            <i><b>Методология функционального моделирования работ SADT</b></i>

            <p>Методология SADT (Structured Analysis and Design Technique - методология структурного анализа и проектирования), разработанная Дугласом Т. Россом в 1969-1973 годах базируется на структурном анализе систем и графическом представление организации в виде системы функций, которые имеют три класса структурных моделей:</p>

            <ol>
                <li>Функциональная модель.</li>
                <li>Информационная модель.</li>
                <li>Динамическая модель.</li>
            </ol>

            <p>Процесс моделирования по методологии SADT  состоит из следующих этапов:</p>

            <ol>
                <li>Сбор информации и анализ информации о предметной области.</li>
                <li>Документирование полученной информации.</li>
                <li>Моделирование (IDEF0).</li>
                <li>Корректура модели в процессе итеративного рецензирования.</li>
            </ol>

            <p>Функциональная модель компании</p>

            <p>Функциональная модель IDEF0 (рис. 5) представляет собой набор блоков, каждый из которых представляет собой «черный ящик» со входа-ми и выходами, управлением и механизмами, которые детализируются (декомпозируются) до необходимого уровня. Наиболее важная функция расположена в верхнем левом углу. А соединяются функции между собой при помощи стрелок и описаний функциональных блоков. При этом каждый вид стрелки или активности имеет собственное значение. Данная модель позволяет описать все основные виды процессов, как административные, так и организационные.</p>

            <p>Стрелки могут быть:</p>
            <ul>
                <li>Входящие – вводные, которые ставят определенную задачу.</li>
                <li>Исходящие – выводящие результат деятельности.</li>
                <li>Управляющие (сверху вниз) – механизмы управления (положения, инструкции и пр).</li>
                <li>Механизмы (снизу вверх) – что используется для того, чтобы произвести необходимую работу.</li>
            </ul>
            <p>Входящие и исходящие стрелки точнее было бы называть вводящими и выводящими, так как по-английски они называются Input и Output соответственно. Но особенности перевода и привычные названия выглядят уже так, как сложилось. И все же для правильного понимания терминов важно помнить их значение в данном случае. Это подтверждается еще и тем, что данная нотация создана прежде всего для разработки ПО, и тер-мины переводить правильнее в этой точки зрения.</p>

            <p>Стрелки подписываются при помощи имен существительных (опыт, план, правила), а блоки – при помощи глаголов, т.е. в них описываются действия, которые производятся (создать товар, заключить договор, про-извести отгрузку).</p>

            <p>IDEF0 – это очень простой и одновременно наглядный язык описания бизнес-процессов. С помощью этого стандарта возможна передача информации между разработчиками, консультантами и пользователями. Стандарт очень тщательно разрабатывался, он удобен для проектирования, универсален. Для работы с ним существует множество инструментов, например, VISIO, BPWIN, ERWIN, Bussines studio и т.д.</p>

            {<Image src='assets/img/lab1.3/1.png' annotation='Рис. 5 Диаграмма IDFO верхнего уровня' />}

            <p>В диаграмме IDEF0 описываются первоначально все внешние связи исследуемого процесса. После этого осуществляется декомпозиция этого процесса и происходит описание внутренних подпроцессов с обозначением всех связей. При этом ранее обозначенные стрелочками внешние связи не должны потеряться. Они переносятся на диаграмму декомпозиции в соответствующие подпроцессы. Пример декомпозиции диаграммы IDEF0 (дочерней) представлен на рис.6. Далее каждый подпроцесс тоже можно декомпозировать и подробно описывать все связи до необходимого предела. Основным достоинством этой методологии являются простота и наглядность. В качестве недостатка – невозможность описать реакцию описываемого процесса на изменяющиеся внешние факторы. Для этих целей служат другие методологии.</p>

            {<Image src='assets/img/lab1.3/2.png' annotation='Рис. 6 Декомпозиция первого уровня' />}

            <i><b>Методология RAD – быстрой разработки приложений</b></i>

            <p>Принципы RAD сформулированы в 1980 году сотрудником компании IBM Джеймсом Мартином.</p>

            <p>Они базировались на идеях Скотта Шульца и Барри Бойма при этом методология реализовывалась в кратчайшие сроки небольшой группой разработчиков с использованием инкрементного прототипирования.</p>

            <p>Это позволяло на ранней стадии проектирования ИС продемонстрировать заказчику действующую интерактивную модель системы-прототипа, уточнить проектные решения, оценить эксплуатационные характеристики.</p>

            <p>В настоящее время <b>методология RAD</b> стала общепринятой схемой для проектирования и разработки информационных систем. Средства раз-работки, основанные на RAD, очень популярны за счет использования та-ких программных сред разработки: IBM Lotus Domino Designer, Borland C++ Builder, Microsoft Visual Studio, Macromedia Flash и др.</p>

            <p>В методологии RAD быстрая разработка приложений достигается за счет использования компонентно-ориентированного конструирования и применяется если:</p>

            <ul>
                <li>Бюджет проектируемой системы ограничен.</li>
                <li>Нечетко определены требования к информационной системе.</li>
                <li>Требуется реализация проекта информационной системы в минимальные сроки.</li>
                <li>Интерфейс пользователя можно продемонстрировать в прототипе.</li>
                <li>Проект можно разделить на составляющие элементы по функциональному назначению.</li>
            </ul>

            <p>Методология RAD имеет следующие стадии:</p>

            <ul>
                <li>Моделирование информационных потоков между бизнес-функциями.</li>
                <li>Моделирование данных.</li>
                <li>Преобразование объектов данных, обеспечивающих реализацию бизнес-функций.</li>
                <li>Генерация приложений.</li>
                <li>Тестирование и объединение.</li>
            </ul>

            <p>Недостатки методологии RAD:</p>

            <p>Для больших информационных систем требуются большой коллектив разработчиков.</p>

            <p>Применима для информационных систем, которые могут декомпозироваться на отдельные модули и в которых производительность не является критической величиной.</p>

            <p>Не используется в случае применения новых технологий.</p>

            <i><b>Методология RUP</b></i>

            <p>Среди всех фирм-производителей CASE-средств компания IBM Ra-tional Software Corp. (до августа 2003 года – это самостоятельная фирма Rational Software Corp.) одна из первых осознала стратегическую перспективность развития объектно-ориентированных технологий анализа и проектирования программных систем. Эта компания выступила инициатором унификации языка визуального моделирования в рамках консорциума OMG, что привело к появлению первых версий языка UML.</p>

            <p>Эта же компания первой разработала инструментальное объектно-ориентированное CASE-средство, в котором был реализован язык UML, как базовая нотация визуального моделирования. Графическое представление методологии RUP из Википедии изображено на рис. 7 .</p>

            {<Image src='assets/img/lab1.3/3.png' annotation='Рис. 7 Представление методологии RUP' />}

            <p>Одна из самых популярных технологий – Rational Unified Process (RUP). В определенном плане эта методология становится международным стандартом, разработанный компанией Rational Software, которая в настоящее время входит в состав IBM. Авторами UML считаются сотрудники фирмы Rational Software: Гради Буч, Айвар Якобсон, Джемс Рамбо. RUP полностью соответствует стандартам, определяющим проектные работы в процессе жизненного цикла информационных систем. В методологии RUP реализуются следующие подходы:</p>

            <ul>
                <li>Итерационный и инкрементный (наращиваемый).</li>
                <li>Построение системы на базе архитектуры информационной системы.</li>
                <li>Планирование и управление проектом на основе функциональных требований к информационной системе.</li>
            </ul>

            <p>Разработка информационной системы выполняется итерациями. Это отдельные проекты небольшие по объему и содержанию, которые включают свои собственные этапы анализа требований, проектирования, реализации, тестирования, интеграции. Заканчиваются итерации созданием работающей информационной подсистемы.</p>

            <p>Итерационный цикл характеризуется периодической обратной связью и может адаптироваться к ядру разрабатываемой системы.</p>

            <p>Создаваемая информационная система постепенно растет и совершенствуется.</p>

            <p>Гибкая методология разработки является отличительной особенностью методом Аgile, широко применяющихся как при разработке программного обеспечения, так и для информационных систем и данным методам будет посвящена отдельная глава учебного пособия.</p>

            <b>Гибкая методология разработки (Agile)</b>

            <p>Agile-модель - это современная тенденция в методологии разработки программного обеспечения, используемая для ускорения доставки операционных продуктов/систем в запланированные сроки с использованием набора значений, которые включают в себя адаптивность, прозрачность, простоту и единство в эффективном и легком взвешенном виде. Гибкая модель - это широко применяемая модель который часто использует подход к упрощению процесса, деля его на короткие и легкие взвешенные фазы, такие как требования, спецификации, архитектура, проектирование, внедрение, тестирование, развертывание и обслуживание, что приводит к со-зданию эффективных программных систем. Существует множество специальных гибких методов разработки. Большинство поощряют развитие, командный дух, ассоциацию и соответствие процессам на протяжении всего жизненного цикла проекта.</p>

            <p>Гибкие методы разбивают задачи на небольшие приращения с минимальным планированием и не связаны напрямую с планированием на большие расстояния. Итерации - это очень короткие временные рамки, которые также называются временными ячейками, которые обычно варьируются от одной до четырех недель. Каждая итерация включает в себя кросс-функциональную группу, которая работает во всех задачах, таких как планирование проектов, анализ требований, системный и архитектурный дизайн, кодирование, тестирование уровня подразделения и, наконец, приемочные испытания. В конце каждой итерации рабочий продукт проверяется заинтересованными сторонами. Это позволяет свести к минимуму общий риск и позволяет проекту быстро адаптироваться к изменениям. Для выпуска продукта может потребоваться много итераций.</p>
            {<Image src='assets/img/lab1.3/4.png' />}
            <p>ИСТОРИЯ AGILE</p>

            <p>Эволюционное управление проектами и адаптивная разработка программного обеспечения появились в начале 1970-х годов. В 1970 году доктор Уинстон Ройс представил документ под названием «Управление развитием крупных программных систем», в котором критиковалась последовательная разработка. Он утверждал, что программное обеспечение не должно разрабатываться как автомобиль на сборочной линии, в кото-ром каждая деталь добавляется в последовательные фазы. В таких последовательных этапах каждая фаза проекта должна быть завершена до того, как начнется следующий этап. Доктор Ройс рекомендовал использовать фазовый подход, в котором разработчики сначала собирают все требования проекта, а затем завершают всю свою архитектуру и дизайн, затем записывают весь код и т.д.</p>

            <p>В 1990-х годах был разработан ряд гибких методов разработки программного обеспечения в ответ на преобладающие тяжеловесные методы. К ним относятся: с 1991 года — RAD (быстрая разработка приложений); с 1994 года — метод разработки динамических систем (DSDM); с 1995 года — Scrum; С 1996 года, Crystal Clear и экстремальное программирование (XP); А с 1997 года — Feature driven development (FDD). Хотя они возник-ли до публикации Манифеста Agile Software Development, они все вместе называются гибкими методами разработки программного обеспечения.</p>

            <p>В феврале 2001 года семнадцать разработчиков ПО встретились на курорте Snowbird в штате Юта, чтобы обсудить легкие методы разработки. Вместе они опубликовали Манифест о гибкой разработке программного обеспечения Agile.</p>

            <p>МАНИФЕСТ AGILE</p>

            <p>Манифест Agile состоит из 4 основополагающих идеи и 12 принципов. Каждая методология Agile применяет эти идеи по-разному, но все они полагаются на них, чтобы управлять проектами максимально эффективно.</p>

            <p>4 ИДЕИ AGILE</p>

            <ol>
                <li>Люди и взаимодействие важнее процессов и инструментов.</li>
                <li>Рабочее программное обеспечение важнее документации.</li>
                <li>Сотрудничество с клиентами важнее согласования условий контракт.</li>
                <li>Готовность внести изменения в приоритете, нежели придерживаться первоначального плана.</li>
            </ol>

            <p>12 ПРИНЦИПОВ AGILE</p>

            <ol>
                <li>Удовлетворенность клиентов за счет ранней и непрерывной поставки программного обеспечения. Клиенты более счастливы, когда они получают рабочее программное обеспечение через регулярные проме-жутки времени.</li>
                <li>Вносить изменения требований к продукту  на протяжении всего процесса разработки.</li>
                <li>Частая поставка рабочего программного обеспечения (каждый месяц, две недели, неделю и т.д.).</li>
                <li>Сотрудничество между заинтересованными сторонами (заказчиком и разработчиками) на протяжении всего проекта.</li>
                <li>Поддержка, доверие и мотивация вовлеченных людей. Мотивированные команды с большей вероятностью выполняют свою лучшую работу, чем сотрудники, недовольные условиями труда.</li>
                <li>Взаимодействие лицом к лицу. Коммуникация более успешна, когда команды разработчиков имеют возможность общаться напрямую.</li>
                <li>Рабочее программное обеспечение является основной мерой прогресса. Предоставление функционального программного обеспечения клиенту является конечным фактором, который измеряет прогресс.</li>
                <li>Поддержка постоянного темпа работы. Команды устанавливают повторяемую и поддерживаемую скорость работы, с которой они могут доставлять функционирующее программное обеспечение.</li>
                <li>Внимание к техническим деталям и дизайну. Правильные навыки и хороший дизайн позволяют команде поддерживать темп, постоянно совершенствовать продукт и работать над изменениями.</li>
                <li>Простота.</li>
                <li>Самоорганизующиеся команды поощряют отличную архитектуру, требования и проекты. Квалифицированные и мотивированные члены команды, которые обладают полномочиями принимать решения, регулярно общаются с другими членами команды и обмениваются идеями, которые обеспечат создание качественного продукта.</li>
                <li>Постоянная адаптация к изменяющимся условиям, что поможет сделать продукт более конкурентоспособным на рынке.</li>
            </ol>

            <p>ОСНОВА МЕТОДА AGILE</p>

            <p>Основой метода гибкого управления проектами является ряд ключевых элементов:</p>

            <ol>
                <li>Визуальный контроль. Участники проекта в ходе работы над проектом используют карточки различных цветов и видов, которые сигнализируют, какой элемент  конечного продукта уже разработан, спланирован, завершен и т.д. Таким образом,  команда имеет наглядное представление о существующем положении дел. Визуальный контроль обеспечивает одинаковое видение проекта каждым из участников.</li>
                <li>Все участники проекта работаю рядом, включая клиента. Такой под-ход не только ускоряет многие процессы, связанные с информированием участников рабочей группы, но и  создает благоприятную атмосферу для сотрудничества и эффективной работы.</li>
                <li>Адаптируемое управление. Руководитель проекта – не человек, который раздает указания, а лидер, определяющий основные правила работы и сотрудничества.</li>
                <li>Совместная работа. Команда, руководитель проекта и клиент работают сообща, что исключает возможность потери информации и не-понимания целей.  Также прозрачность всех процессов позволяет моментально исключать появившиеся проблемы и находить удачные решения и улучшения.</li>
                <li>Работа, основанная на разделении общего объема проекта на составные части. Такая система работы значительно снижает сложность проекта и позволяет командам сфокусироваться на каждой части в отдельности.</li>
                <li>Работа над ошибками. В ходе работы одного цикла команда осваивает новые навыки и анализирует произошедшие ошибки, что исключает их появление в следующем цикле.</li>
                <li>Спринты и ежедневные встречи. Спринты – отрезки времени, за которые команды выполняет ряд задач, — позволяют четко видеть результаты работы. Разделив время работы над проектом на спринты, получаем, например, 10 спринтов, каждый по две недели. А еже-дневные встречи не более чем на 15 минут помогут каждому члену команды ответить для себя на три вопроса: что я делал вчера, что я  буду делать сегодня, что мне мешает выполнять работу?</li>
            </ol>

            <p>Таким образом, внедрение гибкого метода Agile возможно при следующих условиях:</p>
            <ul>
                <li>значение проекта четко обозначено,</li>
                <li>клиент активно участвует на протяжении всего проекта,</li>
                <li>возможно пошаговое выполнение общего объема проекта,</li>
                <li>результат работы важнее, чем документация,</li>
                <li>рабочая группа составляет не более 7-9 человек.</li>
            </ul>

            <p>СИСТЕМЫ УПРАВЛЕНИЯ ПРОЕКТАМИ, ОСНОВАННЫЕ НА AGILE</p>

            <p>Существует множество методов, основанных на идеи Agile, самые популярные из них — Scrum и Kanban.</p>

            <b>SCRUM</b>

            <p>Scrum — это методология управления проектами, в основе которой делается акцент на качественном контроле процесса работы.  Хиротака Такэути и Икудзиро Нонака — первые, кто описал подход Scrum, объяснили его как “подход регби”, в котором scrum — это борьба за мяч. Сам метод представляет собой процесс разработки, разделенный на небольшие итерации — спринты, по завершении которых пользователи получают улучшенный вариант ПО. Спринт жестко фиксирован по времени, а его длительность составляет от 2 до 4 недель. Работа в рамках одного спринта состоит из нескольких этапов:</p>

            <ol>
                <li>Планирование объемов работы для одного спринта.</li>
                <li>Ежедневные совещания на 15 минут для коррекции работы команды и подведения промежуточных итогов.</li>
                <li>Демонстрация результатов работы.</li>
                <li>Ретроспектива спринта, в которой рассмотрены удачные и неудачные события в рамках прошедшего спринта.</li>
            </ol>

            <p>Scrum чаще всего используется для управления сложным программным обеспечением и разработкой продукта, используя итеративные и инкрементные методы.</p>

            <p>Scrum значительно увеличивает производительность и сокращает время до преимуществ по сравнению с классическими процессами «waterfall». Процессы Scrum позволяют организациям плавно адаптироваться к быстро меняющимся требованиям и создавать продукт, отвечающий изменяющимся бизнес-целям. Scrum позволяет:</p>

            <ul>
                <li>Повысить качество результатов;</li>
                <li>Лучше справиться с изменениями;</li>
                <li>Обеспечить более точные оценки, тратя меньше времени на их создание;</li>
                <li>Лучше контролировать сценарий проекта и этапы работы.</li>
            </ul>

            {<Image src='assets/img/lab1.3/5.png' />}

            <p><b>Kanban</b></p>

            <p>Kanban — это процесс, призванный помочь командам работать вместе более эффективно. В переводе с японского kanban обозначает “рекламный щит, вывеска”, а сам метод взят и адаптирован с производственной системы Toyota. Суть Канбан заключается в том, чтобы сделать процесс разработки максимально прозрачным и распределять нагрузку равномерно между членами команды. Канбан способствует непрерывному сотрудничеству и поощряет активное, постоянное обучение и совершенствование.</p>

            <p>Kanban основан на трех принципах:</p>

            <ol>
                <li>Визуализация задач: видимость всей информации о проекте поможет увидеть недочеты, ошибки и накладки.</li>
                <li>Контроль и ограничение WIP (work in progress — работа, выполняемая одновременно): это помогает сбалансировать подход, основанный на потоках, чтобы команды не начинали и не совершали слишком много работы сразу.</li>
                <li>Контроль времени на выполнение задачи и оптимизация работы для экономии времени.</li>
            </ol>

            <p>ДОСТОИНСТВА И НЕДОСТАТКИ AGILE</p>

            <p>Любая методология имеет преимущества и недостатки. Рассмотрим плюсы и минусы Agile.</p>

            <p>Преимущества</p>

            <ol>
                <li>Больше гибкости по сравнению с методологией Waterfall.</li>
            </ol>

            <p>Традиционная методология водопада четко диктует этапы работы. С методологией Agile, расписание и стоимость являются основными определяющими факторами, и это область, которая изменяется для удовлетворения требований заказчиков и потребителей продукта.</p>

            <ol start="2">
                <li>Меньше дефектов в конечном продукте.</li>
            </ol>

            <p>Это результат проверки качества, проводимой на каждом этапе работы. Непрерывный процесс «разработки, сборки и тестирования» также сокращает количество дефектов по мере продолжения итерационных циклов.</p>

            <p>Недостатки</p>

            <ol>
                <li>Постоянное получение обратной связи приводит к постоянному переносу даты завершения проекта.</li>
            </ol>

            <p>Благодаря мгновенной обратной связи, которую предоставляет Agile, возникает опасность долгой работы. Конечные пользователи, которые видят, что эти требования могут быть выполнены «легко» (они видят только результат, а не усилия), будут запрашивать дополнительные функции. Если менеджер проекта и разработчики не могут управлять ожиданиями, конечные пользователи будут продолжать запрашивать больше, пока вся команда не будет загружена дополнительной работой.</p>

            <ol start="2">
                <li>Документация</li>
            </ol>

            <p>Из-за гибкого характера Agile  документации должна следовать за быстро меняющимися условиями проекта. Запрос на изменение или функцию можно было бы подробно обсудить и согласовать с конечными пользователями, разработчиками и тестировщиками, но если команда не была проинформирована, критический документ, такой как руководство пользователя, документ с архитектурой или функциональным требованием, станет устаревшим.</p>

            <ol start="3">
                <li>Частые встречи</li>
            </ol>

            <p>Хотя Agile рекомендует, чтобы такие встречи проводились ежедневно, чтобы держать всех в курсе прогресса друг друга, устойчивость такой практики сказывается на прогрессе итераций. Разработчики сосредоточены на том, что они делают. Вытягивание их для встречи, которая может отвлечь их от выполнения фактической работы, — это не то, что они примут с радостью.</p>

            <p>ВНЕДРЕНИЕ AGILE</p>

            <ol>
                <li>Выбор методики. Существуют различные гибкие методологии, которые разработаны под определенные условия. Первым этапом работы с Agile необходимо определить цели  задачи работы, сроки, количество сотрудников и многое другое и подобрать такую гибкую методику управления проектом, которая будет отвечать всем требованиям.</li>
                <li>Обучение персонала. Обучение необходимо для того, чтобы сотрудники понимали базовые принципы Agile и знали как с ними работать. Именно на этом этапе определяются подводные камни, которые могут снизить эффективность Agile. Готов ли коллектив к изменениям? Подходят ли проекты компании для гибких методик? На эти и многие другие вопросы обычно помогают ответить бизнес-тренеры, специализирующиеся на Agile. Помимо прочего будет так-же составлен список тренингов и план, по которому будет вестись внедрение Agile в компании.</li>
                <li>Демонстрация Agile. Своеобразный тест-драйв Agile, которые про-водится под контролем специалиста и показывает все этапы работы, объясняет функции ролей, взаимодействие внутри команды и между командами и т.д.</li>
                <li>Создание команды. В создание команды помимо подбора сотрудников также входит определение обязанностей, распределение задач, создание графика встреч и т.д. Каждая из методик рассчитана на определенное количество человек в команде.</li>
                <li>Выбор инструментов, необходимых для распределения задач, ведения отчетности, аналитики и прочее.</li>
                <li>Первый проект с Agile. В первом проекте будут ошибки, несостыковки, отказ от одних инструментов и выбор других. Любая методика требует своеобразной адаптации под особенности компании, в которую она внедряется.</li>
            </ol>


        </div>
    )
}

Lecture3.propTypes = {

}
